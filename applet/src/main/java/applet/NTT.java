package applet;

import java.util.Arrays;

import javacard.framework.ISOException;

public class NTT {

    // RLWE constants
    public static final short RLWE_Q = 7681;
    public static final short RLWE_N = 256;
    public static final short[] RLWE_W = {1, 3844, 5773, 1003, 7351, 6526, 7479, 6974, 1366, 4781, 5212, 2880, 2399, 4556, 584, 2044, 7154, 1996, 6986, 1408, 4928, 1886, 6601, 3901, 2132, 7462, 3074, 3078, 3092, 3141, 7153, 5833, 1213, 405, 5258, 3041, 6803, 4608, 766, 2681, 5543, 198, 693, 6266, 6569, 3789, 1740, 6090, 5953, 1633, 1875, 2722, 1846, 6461, 3411, 417, 5300, 3188, 3477, 648, 2268, 257, 4740, 1228, 4298, 7362, 2724, 1853, 2645, 5417, 7438, 2990, 2784, 2063, 3380, 4149, 3000, 2819, 6026, 5729, 849, 6812, 799, 6637, 4027, 2573, 5165, 6556, 7584, 3501, 732, 2562, 1286, 4501, 4232, 7131, 5756, 4784, 1382, 4837, 5408, 3566, 4800, 1438, 5033, 6094, 5967, 1682, 5887, 1402, 4907, 5653, 583, 5881, 1381, 993, 7316, 2563, 5130, 2593, 5235, 6801, 4601, 4582, 675, 6203, 2508, 1097, 7680, 3837, 1908, 6678, 330, 1155, 202, 707, 6315, 2900, 2469, 4801, 5282, 3125, 7097, 5637, 527, 5685, 695, 6273, 2753, 5795, 1080, 3780, 5549, 219, 4607, 4603, 4589, 4540, 528, 1848, 6468, 7276, 2423, 4640, 878, 3073, 6915, 5000, 2138, 7483, 6988, 1415, 1112, 3892, 5941, 1591, 1728, 6048, 5806, 4959, 5835, 1220, 4270, 7264, 2381, 4493, 4204, 7033, 5413, 7424, 2941, 6453, 3383, 319, 4957, 5828, 5036, 2264, 243, 4691, 4897, 5618, 4301, 3532, 4681, 4862, 1655, 1952, 6832, 869, 6882, 1044, 3654, 5108, 2516, 1125, 97, 4180, 6949, 5119, 6395, 3180, 3449, 550, 1925, 2897, 6299, 2844, 2273, 4115, 2881, 6243, 2648, 1587, 1714, 5999, 1794, 6279, 2774, 2028, 7098, 1800, 6300, 6688, 365, 5118, 2551, 5088, 2446, 880, 3080, 3099, 7006, 1478, 5173, 6584};
    public static final short[] RLWE_W_REV = {1, 6584, 5173, 1478, 7006, 3099, 3080, 880, 2446, 5088, 2551, 5118, 365, 6688, 6300, 1800, 7098, 2028, 2774, 6279, 1794, 5999, 1714, 1587, 2648, 6243, 2881, 4115, 2273, 2844, 6299, 2897, 1925, 550, 3449, 3180, 6395, 5119, 6949, 4180, 97, 1125, 2516, 5108, 3654, 1044, 6882, 869, 6832, 1952, 1655, 4862, 4681, 3532, 4301, 5618, 4897, 4691, 243, 2264, 5036, 5828, 4957, 319, 3383, 6453, 2941, 7424, 5413, 7033, 4204, 4493, 2381, 7264, 4270, 1220, 5835, 4959, 5806, 6048, 1728, 1591, 5941, 3892, 1112, 1415, 6988, 7483, 2138, 5000, 6915, 3073, 878, 4640, 2423, 7276, 6468, 1848, 528, 4540, 4589, 4603, 4607, 219, 5549, 3780, 1080, 5795, 2753, 6273, 695, 5685, 527, 5637, 7097, 3125, 5282, 4801, 2469, 2900, 6315, 707, 202, 1155, 330, 6678, 1908, 3837, 7680, 1097, 2508, 6203, 675, 4582, 4601, 6801, 5235, 2593, 5130, 2563, 7316, 993, 1381, 5881, 583, 5653, 4907, 1402, 5887, 1682, 5967, 6094, 5033, 1438, 4800, 3566, 5408, 4837, 1382, 4784, 5756, 7131, 4232, 4501, 1286, 2562, 732, 3501, 7584, 6556, 5165, 2573, 4027, 6637, 799, 6812, 849, 5729, 6026, 2819, 3000, 4149, 3380, 2063, 2784, 2990, 7438, 5417, 2645, 1853, 2724, 7362, 4298, 1228, 4740, 257, 2268, 648, 3477, 3188, 5300, 417, 3411, 6461, 1846, 2722, 1875, 1633, 5953, 6090, 1740, 3789, 6569, 6266, 693, 198, 5543, 2681, 766, 4608, 6803, 3041, 5258, 405, 1213, 5833, 7153, 3141, 3092, 3078, 3074, 7462, 2132, 3901, 6601, 1886, 4928, 1408, 6986, 1996, 7154, 2044, 584, 4556, 2399, 2880, 5212, 4781, 1366, 6974, 7479, 6526, 7351, 1003, 5773, 3844};
    public static final short[] RLWE_W_SQRT = {62, 217, 4600, 738, 2583, 5200, 2838, 2252, 201, 4544, 542, 1897, 2799, 5956, 5484, 3832, 5731, 856, 2996, 2805, 5977, 1717, 2169, 3751, 1607, 1784, 6244, 6492, 7360, 2717, 5669, 639, 6077, 2067, 3394, 4198, 7012, 1499, 1406, 4921, 5702, 4595, 4561, 4442, 185, 4488, 346, 1211, 398, 1393, 1035, 7463, 6918, 1170, 4095, 2811, 5998, 5631, 506, 1771, 2358, 572, 2002, 7007, 5322, 3265, 7587, 7352, 2689, 5571, 296, 1036, 3626, 5010, 2173, 3765, 1656, 5796, 4924, 1872, 6552, 7570, 3452, 4401, 3882, 5906, 5309, 7060, 1667, 1994, 6979, 5224, 2922, 2546, 1230, 4305, 3546, 4730, 1193, 335, 5013, 6024, 5722, 4665, 4806, 1459, 1266, 4431, 3987, 2433, 4675, 4841, 5422, 3615, 1131, 118, 413, 5286, 3139, 7146, 1968, 6888, 1065, 7568, 3445, 536, 1876, 6566};
    public static final short[] RLWE_W_SQRT_REV = {1115, 5805, 7145, 4236, 113, 6616, 793, 5713, 535, 4542, 2395, 7268, 7563, 6550, 4066, 2259, 2840, 3006, 5248, 3694, 3250, 6415, 6222, 2875, 3016, 1959, 1657, 2668, 7346, 6488, 2951, 4135, 3376, 6451, 5135, 4759, 2457, 702, 5687, 6014, 621, 2372, 1775, 3799, 3280, 4229, 111, 1129, 5809, 2757, 1885, 6025, 3916, 5508, 2671, 4055, 6645, 7385, 2110, 4992, 329, 94, 4416, 2359, 674, 5679, 7109, 5323, 5910, 7175, 2050, 1683, 4870, 3586, 6511, 763, 218, 6646, 6288, 7283, 6470, 7335, 3193, 7496, 3239, 3120, 3086, 1979, 2760, 6275, 6182, 669, 3483, 4287, 5614, 1604, 7042, 2012, 4964, 321, 1189, 1437, 5897, 6074, 3930, 5512, 5964, 1704, 4876, 4685, 6825, 1950, 3849, 2197, 1725, 4882, 5784, 7139, 3137, 7480, 5429, 4843, 2481, 5098, 6943, 3081, 7464, 7619};

    // Ring-SIS constants
    public static short RSIS_L = 128;
    public static short RSIS_Q = 257;

    public static short[] RSIS_W = {1, 4, 16, 64, 256, 253, 241, 193};
    public static short[] RSIS_W_REV = {1, 193, 241, 253, 256, 64, 16, 4};
    public static short[] RSIS_W_SQRT = {2, 8, 32, 128, 255, 249, 225, 129};
    public static short[] RSIS_W_SQRT_REV = {129, 225, 249, 255, 128, 32, 8, 2};

    public static short add_mod(short a, short b, short m) {
        return (short)(((int)a + (int)b) % m);
    }
    public static short sub_mod(short a, short b, short m) {
        short r = (short)(((int)a - (int)b) % m);
        if (r < 0) {
            r += m;
            r %= m;
        }
        return r;
    }
    public static short mul_mod(short a, short b, short m) {
        return (short)(((int)a * (int)b) % m);
    }

    public static short modexp(short a, short b, short m) {
        short y = 1;
        while (b>1) {
            if(a%2==1) {
                y = mul_mod(a,y,m);
                a = (short)(a - (short)1);
            }
            a = mul_mod(a,a,m);
            b = (short)(b/2);
        }
        return mul_mod(a,y,m);
    }
    
    private static void forward(short[] x, short Q, short N, short[] W, short[] W_SQRT) {
        short index;
        short step;
        short i;
        short j = 0;
        int m = N >> 1;
        short t0;
        short t1;

        for (i=0; i<N>>1; i++) {
            x[j] = mul_mod(x[j], W[i%W.length], Q);
            j += 1;
            x[j] = mul_mod(x[j], W_SQRT[i%W_SQRT.length], Q);
            j += 1;
        }
        step = 1;
        while (m >= 1) {
            index = 0;
            for (j=0; j<m; j++) {
                i=j;
                while (i<N) {
                    t0 = add_mod(x[i], x[i+m], Q);
                    t1 = (short)((int)x[i] + ((int)Q - (int)x[i+m]));
                    x[i+m] = mul_mod(t1, W[index%W.length], Q);
                    x[i] = t0;
                    i += m<<1;
                }
                index = sub_mod(index, step, N);
            }
            step = (short)(step << 1);
            m = (m >> 1);
        }
    }

    private static void backward(short[] x, short Q, short N, short[] W_REV, short[] W_SQRT_REV) {
        short index;
        short step;
        short i = 0;
        short j = 0;
        int m = 1;
        short t0;
        short t1;
        step = (short)(N >> 1);
        while (m<N) {
            index = 0;
            for(j=0; j<m; j++) {
                i=j;
                while (i<N) {
                    t0 = x[i];
                    if (t0 > Q) { t0 -= Q; }
                    t1 = mul_mod(x[i+m], W_REV[index%W_REV.length], Q);
                    x[i] = (short)((int)t0 + (int)t1);
                    x[i+m] = (short)((int)t0 + (int)(Q-t1));
                    i += m<<1;
                }
                index = sub_mod(index, step, N);
            }
            step = (short)((int)step >> 1);
            m = m << 1;
        }
        j = 0;
        for(i=0; i<N>>1; i++) {
            x[j] = mul_mod(x[j], W_REV[i%W_REV.length], Q);
            j+=1;
            x[j] = mul_mod(x[j], W_SQRT_REV[i%W_SQRT_REV.length], Q);
            j+=1;
        }

        for (i=0; i<N; i++) {
            x[i] = mul_mod(x[i], (short)7651, Q);
        }

    }

    public static void rlwe_forward(short[] x) {
        forward(x, RLWE_Q, RLWE_N, RLWE_W, RLWE_W_SQRT);
    }

    public static void rlwe_backward(short[] x) {
        backward(x, RLWE_Q, RLWE_N, RLWE_W_REV, RLWE_W_SQRT_REV);
    }

    public static void rsis_forward(short[] x) {
        forward(x, RSIS_Q, RSIS_L, RSIS_W, RSIS_W_SQRT);
    }

    public static void rsis_backward(short[] x) {
        backward(x, RSIS_Q, RSIS_L, RSIS_W_REV, RSIS_W_SQRT_REV);
    }
}
